apiVersion: template.openshift.io/v1
kind: Template
labels:
  build: ${APP_NAME}
  template: ${APP_NAME}-template-bc
metadata:
  name: ${APP_NAME}-template-bc
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nginx-${APP_NAME}-config
      namespace: ${NAMESPACE}
      labels: 
        app.kubernetes.io/part-of: ${OC_ENV}
    data:
      fluent-bit.conf: |
        [SERVICE]
          Flush         5
          Daemon        Off
          # define the log format (see additional config map key/value)
          Parsers_File  parsers.conf
          Log_Level     info
          HTTP_Server   On
          HTTP_Listen   0.0.0.0
          HTTP_Port     2020
          Health_Check  On

        [INPUT]
          # get logs from file written by nginx app
          Name        tail
          Path        /tmp/*.log
          Tag         app
      
        [FILTER]
          # filter logs based on certain keyword(s)
          name   grep
          match  app
          regex  log error
            
        [FILTER]
          # exclude "No such file or directory" error from app logs
          name     grep
          match    app
          Exclude  log No\ssuch\sfile\sor\sdirectory
        
        [FILTER]
          name          parser
          match         app
          Key_Name      log
          Parser        parser
          Preserve_Key  On

        [FILTER]
          # modify log entry to include namespace and container name
          name    record_modifier
          match   app
          # add namespace
          Record namespace ${NAMESPACE}
          # add container name
          Record container ${OC_ENV}-ingress

        [FILTER]
          Name          rewrite_tag
          Match         app
          Rule          $level ([a-zA-Z]*)$ $TAG.$level true
          Emitter_Name  re_emitted


        [OUTPUT]
          name                 slack
          match                app
          webhook              ${SLACK_ERROR_NOTIFICATION_WEBHOOK}

        [OUTPUT]
          Name    stdout
          Match   app
          Format  json_lines
      parsers.conf: |
        [PARSER]
          Name             parser
          Format regex
          Regex  (?<timestamp>\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) \[(?<level>.*)\]\ (?<process_id>\d*)#(?<thread_id>\d*): (?<message>.*)
          Time_Key time

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: webapi-${APP_NAME}-config
      namespace: ${NAMESPACE}
      labels: 
        app.kubernetes.io/part-of: ${OC_ENV}
    data:
      fluent-bit.conf: |
        [SERVICE]
          Flush         5
          Daemon        Off
          # define the log format (see additional config map key/value)
          Parsers_File  parsers.conf
          Log_Level     info
          HTTP_Server   On
          HTTP_Listen   0.0.0.0
          HTTP_Port     2020
          Health_Check  On

        [INPUT]
          # get logs from file written by webapi app
          Name        tail
          Path        /app/logs/*.log
          Tag         app

        [FILTER]
          # filter logs based on certain keyword(s)
          name   grep
          match  app
          regex  log ERR
        
        [FILTER]
          # exclude "500 and 503" error from app logs
          name     grep
          match    app
          Exclude  log 500
          Exclude  log 503

        [FILTER]
          name          parser
          match         app
          Key_Name      log
          Parser        parser
          Preserve_Key  On

        [FILTER]
          # modify log entry to include namespace and container name
          name    record_modifier
          match   app
          # add namespace
          Record namespace ${NAMESPACE}
          # add container name
          Record container ${OC_ENV}-webapi

        [FILTER]
          Name          rewrite_tag
          Match         app
          Rule          $level ([a-zA-Z]*)$ $TAG.$level true
          Emitter_Name  re_emitted


        [OUTPUT]
          name                 slack
          match                app
          webhook              ${SLACK_ERROR_NOTIFICATION_WEBHOOK}

        [OUTPUT]
          Name    stdout
          Match   app
          Format  json_lines

      parsers.conf: |
        [PARSER]
          Name   parser
          Format regex
          Regex  \[(?<timestamp>\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2})(?<level>.*)]\ (?<message>.*)
          Time_Key time

parameters:
  - name: APP_NAME
    description: Application name
    displayName: Application name
    required: true
    value: fluentbit
  - name: NAMESPACE
    description: Namespace
    displayName: Namespace
    required: true
    value: d8a8f9-dev
  - name: OC_ENV
    description: OpenShift Environment
    displayName: OpenShift Environment
    required: true
    value: dev
  - name: SLACK_ERROR_NOTIFICATION_WEBHOOK
    description: Slack error notification Webhook URL
    displayName: Slack Webhook URL
    required: true
    value: ""