kind: StatefulSet
apiVersion: apps/v1
metadata:
  labels:
    app: patroni
    cluster-name: patroni
    app.kubernetes.io/name: patroni
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: patroni
  name: patroni
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      cluster-name: patroni
      role: master
      app.kubernetes.io/name: patroni
  serviceName: patroni
  template:
    metadata:
      labels:
        cluster-name: patroni
        role: master
        app.kubernetes.io/name: patroni
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: statefulset
                    operator: In
                    values:
                      - patroni
              topologyKey: "kubernetes.io/hostname"
      containers:
        - env:
            #TODO: Remove POD_IP in favor of PATRONI_KUBERNETES_POD_IP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: PATRONI_KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: PATRONI_KUBERNETES_LABELS
              value: '{"cluster-name": "licenseplate", "app.kubernetes.io/name": "patroni"}'
            - name: PATRONI_SUPERUSER_USERNAME
              valueFrom:
                secretKeyRef:
                  key: superuser-username
                  name: patroni-creds
            - name: PATRONI_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: superuser-password
                  name: patroni-creds
            - name: PATRONI_REPLICATION_USERNAME
              valueFrom:
                secretKeyRef:
                  key: replication-username
                  name: patroni-creds
            - name: PATRONI_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: replication-password
                  name: patroni-creds
            - name: APP_USER
              valueFrom:
                secretKeyRef:
                  key: app-db-username
                  name: patroni-creds
            - name: APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: app-db-password
                  name: patroni-creds
            - name: APP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: app-db-name
                  name: patroni-creds
            - name: PATRONI_SCOPE
              value: patroni
            - name: PATRONI_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: PATRONI_LOG_LEVEL
              value: WARNING
            - name: PATRONI_POSTGRESQL_DATA_DIR
              value: /home/postgres/pgdata/pgroot/data
            - name: PATRONI_POSTGRESQL_PGPASS
              value: /tmp/pgpass
            - name: PATRONI_POSTGRESQL_LISTEN
              value: 0.0.0.0:5432
            - name: PATRONI_RESTAPI_LISTEN
              value: 0.0.0.0:8008
          image: patroni-postgres
          imagePullPolicy: Always
          name: patroni
          ports:
            - containerPort: 8008
              protocol: TCP
            - containerPort: 5432
              protocol: TCP
          resources:
            requests:
              cpu: 250m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            failureThreshold: 4
            exec:
              command:
                - /usr/share/scripts/patroni/health_check.sh
          volumeMounts:
            - name: postgresql
              mountPath: /home/postgres/pgdata
            - name: config-patroni-entrypoint
              mountPath: /usr/bin/entrypoint.sh
              readOnly: true
              subPath: entrypoint.sh
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: patroni
      terminationGracePeriodSeconds: 0
      volumes:
      - name: config-patroni-entrypoint
        configMap:
          defaultMode: 448
          name: config-patroni-entrypoint

  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        annotations:
          volume.beta.kubernetes.io/storage-class: netapp-file-standard
        labels:
          app: patroni
        name: postgresql
      spec:
        storageClassName: netapp-file-standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi