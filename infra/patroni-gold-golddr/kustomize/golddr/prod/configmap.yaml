# this is the entrypoint script that will override the default one in the ppatroni-postgres image.
# TODO: update the code in the upstream image to include hardcoding the 10.95 and 10.97 ranges for the pghba
kind: ConfigMap
apiVersion: v1
metadata:
  name: config-patroni-entrypoint
data:
  entrypoint.sh: |-
    #!/bin/bash

    if [[ $UID -ge 10000 ]]; then
        GID=$(id -g)
        sed -e "s/^postgres:x:[^:]*:[^:]*:/postgres:x:$UID:$GID:/" /etc/passwd > /tmp/passwd
        cat /tmp/passwd > /etc/passwd
        rm /tmp/passwd
    fi

    # FIX -> FATAL:  data directory "..." has group or world access
    mkdir -p "$PATRONI_POSTGRESQL_DATA_DIR"
    chmod 700 "$PATRONI_POSTGRESQL_DATA_DIR"

    tsc_port=`cat /intercom/tsc_port`

    cat > /home/postgres/patroni.yml <<__EOF__
    bootstrap:
      post_bootstrap: /usr/share/scripts/patroni/post_init.sh
      dcs:
        postgresql:
          use_pg_rewind: true
          parameters:
            max_connections: ${POSTGRESQL_MAX_CONNECTIONS:-100}
            max_prepared_transactions: ${POSTGRESQL_MAX_PREPARED_TRANSACTIONS:-0}
            max_locks_per_transaction: ${POSTGRESQL_MAX_LOCKS_PER_TRANSACTION:-64}
        standby_cluster:
            host: patroni-master-gold
            port: $tsc_port
        
      initdb:
      - auth-host: md5
      - auth-local: trust
      - encoding: UTF8
      - locale: en_US.UTF-8
      - data-checksums
      pg_hba:
      - host all all 0.0.0.0/0 md5
      - host replication ${PATRONI_REPLICATION_USERNAME} 10.95.0.0/16    md5  # GoldDR Range
      - host replication ${PATRONI_REPLICATION_USERNAME} 10.97.0.0/16    md5  # Gold & Silver Clusters
    restapi:
      connect_address: '${POD_IP}:8008'
    postgresql:
      connect_address: '${POD_IP}:5432'
      authentication:
        superuser:
          password: '${PATRONI_SUPERUSER_PASSWORD}'
        replication:
          password: '${PATRONI_REPLICATION_PASSWORD}'
    __EOF__

    unset PATRONI_SUPERUSER_PASSWORD PATRONI_REPLICATION_PASSWORD
    export KUBERNETES_NAMESPACE=$PATRONI_KUBERNETES_NAMESPACE
    export POD_NAME=$PATRONI_NAME

    exec /usr/bin/python3 /usr/local/bin/patroni /home/postgres/patroni.yml

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: patroni-probe
  labels:
    app.kubernetes.io/instance: patroni
    app.kubernetes.io/name: patroni
    app.kubernetes.io/component: database
    app: patroni
    cluster-name: patroni
data:
  probe.sh: |-
    #!/bin/bash

    tsc_port=`cat /intercom/tsc_port`

    /usr/bin/pg_isready -Upostgres -h patroni-master-gold -p $tsc_port
    if [ $? -eq 0 ]
    then
      echo "Gold is running as expected"
      echo "healthy" > /intercom/health
      exit 0
    else
      echo "Gold is broken, failover to GoldDR"
      echo "unhealthy" > /intercom/health
      exit 0
    fi
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: patroni-failover
data:
  failover.sh: |-
    #!/bin/bash

    health_status=`cat /intercom/health`

    if [[ "$health_status" == "unhealthy" ]];
    then
      echo "Gold is unhealthy..."
      status=`oc exec $(oc describe cm patroni-leader|sed -n -e 's/^.*leader: //p') -- /bin/bash -c '/usr/bin/pg_isready -q && /usr/local/bin/patronictl list --format=json | jq -r ".[] | select(.Role == \"Standby Leader\") | .Role" '`
      if [[ "$status" == "Standby Leader" ]];
      then
        echo "GoldDR config needs to be updated to be leader"
        oc get configmap patroni-config -o json | sed -e "s/standby_cluster/null/g" | oc replace -f -
      else
        echo "GoldDR is not in standby. Do nothing."
      fi
    else
      echo "Gold is Healthy - do nothing"
    fi
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: patroni-gettsport
data:
  gettsport.sh: |-
    #!/bin/bash
    tsc_port=`oc get services patroni-master-gold -o jsonpath={.spec.ports[0].port}`
    echo "$tsc_port" > /intercom/tsc_port
---