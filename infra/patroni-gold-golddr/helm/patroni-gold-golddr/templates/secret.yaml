# This secret and corresponding values file that holds "secrets" is for illustration purposes and to provide a complete solution.
# TODO: Update this in the k8s secrets with proper secrets or better yet use vault to store your data. I'll leave this as an exercise for you to implement on your own.
# More details on how to use BCGov't vault can be found here: https://github.com/bashbang/cloudops/tree/main/vault-openshift-bcgov/microservice
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
  namespace: {{ .Values.license_plate }}-{{ .Values.environment }}
  labels:
    {{- include "chart.common-labels" . }}
stringData:
  replication-username: replication
  replication-password: {{ .Values.replication_password }}
  superuser-username: postgres
  # # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  # {{- $secretObj := lookup "v1" "Secret" .Release.Namespace "patroni-creds" | default dict }}
  # {{- $secretData := $secretObj.data | default dict }}
  # # If there's an empty value it'll default to a b64'd random string that gets decoded in the assignment on the next line
  # # otherwise it'll just use the same string that was alrady in the secret which is retruend in a b64 format.
  # {{- $superuserpwd := (get $secretData "superuserpwd") | default (randAlphaNum 8 | b64enc) }}
  # superuserpwd: {{ $superuserpwd | b64dec | quote }}
  superuser-password: {{ .Values.root_password }}
  app-db-name: {{ .Values.app_db_name }}
  app-db-username: {{ .Values.app_db_username }}
  app-db-password: {{ .Values.app_db_password }}