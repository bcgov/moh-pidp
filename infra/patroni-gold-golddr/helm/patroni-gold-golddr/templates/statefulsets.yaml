kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.app_name }}
  namespace: {{ .Values.license_plate }}-{{ .Values.environment }}
  labels:
    {{- include "chart.common-labels" . }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      cluster-name: {{ .Values.app_name }}
      role: master
      app.kubernetes.io/name: {{ .Values.app_name }}
      app: {{ .Values.app_name }}
  serviceName: {{ .Values.app_name }}
  template:
    metadata:
      labels:
        cluster-name: {{ .Values.app_name }}
        role: master
        app.kubernetes.io/name: {{ .Values.app_name }}
        app: {{ .Values.app_name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: statefulset
                    operator: In
                    values:
                      - {{ .Values.app_name }}
              topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: {{ .Values.app_name }}-get-ts-port
          # This container obtains the TS port that we use to connect to Gold in the patroni config inside the main container
          image: image-registry.openshift-image-registry.svc:5000/openshift/cli
          args:
            - /bin/sh
            - '-c'
            - '/get-ts-port.sh'
          resources:
            requests:
              cpu: {{ .Values.stateful_initrequests_cpu }}
              memory: {{ .Values.stateful_initrequests_memory }}
            limits:
              cpu: {{ .Values.stateful_initlimit_cpu }}
              memory: {{ .Values.stateful_initlimit_memory }}
          volumeMounts:
            - name: {{ .Values.app_name }}-intercom
              mountPath: /intercom
            - name: {{ .Values.app_name }}-get-ts-port
              mountPath: /get-ts-port.sh
              subPath: get-ts-port.sh
      containers:
        - env:
            #TODO: Remove POD_IP in favor of PATRONI_KUBERNETES_POD_IP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            #          - name: PATRONI_KUBERNETES_USE_ENDPOINTS
            #            value: 'true'
            #          - name: PATRONI_KUBERNETES_POD_IP
            #            valueFrom:
            #              fieldRef:
            #                apiVersion: v1
            #                fieldPath: status.podIP
            #          - name: PATRONI_KUBERNETES_PORTS
            #            value: '{[{"name": "postgresql", "port": 5432}]}'
            - name: PATRONI_KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: PATRONI_KUBERNETES_LABELS
              value: '{"cluster-name": "{{ .Values.license_plate }}", "app.kubernetes.io/name": "patroni"}'
            - name: PATRONI_SUPERUSER_USERNAME
              valueFrom:
                secretKeyRef:
                  key: superuser-username
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: PATRONI_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: superuser-password
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: PATRONI_REPLICATION_USERNAME
              valueFrom:
                secretKeyRef:
                  key: replication-username
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: PATRONI_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: replication-password
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: APP_USER
              valueFrom:
                secretKeyRef:
                  key: app-db-username
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: app-db-password
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: APP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: app-db-name
                  name: {{ .Values.environment }}-{{ .Values.app_name }}-secret
            - name: PATRONI_SCOPE
              value: {{ .Values.app_name }}
            - name: PATRONI_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: PATRONI_LOG_LEVEL
              value: {{ .Values.loglevel }}
            - name: PATRONI_POSTGRESQL_DATA_DIR
              value: /home/postgres/pgdata/pgroot/data
            - name: PATRONI_POSTGRESQL_PGPASS
              value: /tmp/pgpass
            - name: PATRONI_POSTGRESQL_LISTEN
              value: 0.0.0.0:5432
            - name: PATRONI_RESTAPI_LISTEN
              value: 0.0.0.0:8008
            - name: CLUSTER
              value: {{ .Values.cluster }}
          # image: {{ .Values.image_registry }}/{{ .Values.license_plate }}-tools/patroni-postgres:latest
          image: artifacts.developer.gov.bc.ca/bcgov-docker-local/patroni-postgres:2.0.1-12.4-latest
          imagePullPolicy: Always
          name: patroni
          ports:
            - containerPort: 8008
              protocol: TCP
            - containerPort: 5432
              protocol: TCP
          resources:
            requests:
              cpu: {{ .Values.stateful_requests_cpu }}
              memory: {{ .Values.stateful_requests_memory }}
            limits:
              cpu: {{ .Values.stateful_limit_cpu }}
              memory: {{ .Values.stateful_limit_memory }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            failureThreshold: 4
            exec:
              command:
                - /usr/share/scripts/patroni/health_check.sh
          volumeMounts:
            - name: postgresql
              mountPath: /home/postgres/pgdata
            - name: {{ .Values.app_name }}-entrypoint
              mountPath: /usr/bin/entrypoint.sh
              readOnly: true
              subPath: entrypoint.sh
            - name: {{ .Values.app_name }}-intercom
              mountPath: /intercom
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: {{ .Values.app_name }}
      terminationGracePeriodSeconds: 0
      volumes:
      - name: {{ .Values.app_name }}-entrypoint
        configMap:
          name: {{ .Values.app_name }}-entrypoint
          defaultMode: 448
      - name: {{ .Values.app_name }}-intercom
        emptyDir: {}
      - name: {{ .Values.app_name }}-get-ts-port
        configMap:
          name: {{ .Values.app_name }}-get-ts-port
          defaultMode: 0555

  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        annotations:
          volume.beta.kubernetes.io/storage-class: netapp-file-standard
        labels:
          app: {{ .Values.app_name }}
        name: postgresql
      spec:
        storageClassName: netapp-file-standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.volume_size }}
