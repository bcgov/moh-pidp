// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pidp.Data;

#nullable disable

namespace Pidp.Data.Migrations
{
    [DbContext(typeof(PidpDbContext))]
    [Migration("20250120234539_AddFeedbackLogTable")]
    partial class AddFeedbackLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pidp.Models.AccessRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTypeCode")
                        .HasColumnType("integer");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<Instant>("RequestedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("AccessRequest");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Pidp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Address");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Address");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Pidp.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Pidp.Models.BusinessEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("RecordedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BusinessEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Pidp.Models.ClientLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ClientLog");
                });

            modelBuilder.Entity("Pidp.Models.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentityProvider")
                        .HasColumnType("text");

                    b.Property<string>("IdpId")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("\"UserId\" != '00000000-0000-0000-0000-000000000000'");

                    b.ToTable("Credential", t =>
                        {
                            t.HasCheckConstraint("CHK_Credential_AtLeastOneIdentifier", "((\"UserId\" != '00000000-0000-0000-0000-000000000000') or (\"IdpId\" is not null))");
                        });
                });

            modelBuilder.Entity("Pidp.Models.CredentialLinkErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CredentialLinkTicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ExistingCredentialId")
                        .HasColumnType("integer");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CredentialLinkTicketId");

                    b.HasIndex("ExistingCredentialId");

                    b.ToTable("CredentialLinkErrorLog");
                });

            modelBuilder.Entity("Pidp.Models.CredentialLinkTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Claimed")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkToIdentityProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("CredentialLinkTicket");
                });

            modelBuilder.Entity("Pidp.Models.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestStatus")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MsgId")
                        .HasColumnType("uuid");

                    b.Property<string>("SendType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdateCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("Pidp.Models.Endorsement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Endorsement");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndorsementId")
                        .HasColumnType("integer");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndorsementId");

                    b.HasIndex("PartyId");

                    b.ToTable("EndorsementRelationship");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PreApproved")
                        .HasColumnType("boolean");

                    b.Property<int?>("ReceivingPartyId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestingPartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Instant>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingPartyId");

                    b.HasIndex("RequestingPartyId");

                    b.ToTable("EndorsementRequest");
                });

            modelBuilder.Entity("Pidp.Models.FeedbackLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentInformation")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FeedbackLog");
                });

            modelBuilder.Entity("Pidp.Models.Lookups.AccessType", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("AccessTypeLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Special Authority eForms"
                        },
                        new
                        {
                            Code = 2,
                            Name = "HCIMWeb Account Transfer"
                        },
                        new
                        {
                            Code = 3,
                            Name = "HCIMWeb Enrolment"
                        },
                        new
                        {
                            Code = 4,
                            Name = "Driver Medical Fitness"
                        },
                        new
                        {
                            Code = 5,
                            Name = "MS Teams for Clinical Use - Privacy Officer"
                        },
                        new
                        {
                            Code = 6,
                            Name = "Prescription Refill eForm for Pharmacists"
                        },
                        new
                        {
                            Code = 7,
                            Name = "Provider Reporting Portal"
                        },
                        new
                        {
                            Code = 8,
                            Name = "MS Teams for Clinical Use - Clinic Member"
                        },
                        new
                        {
                            Code = 9,
                            Name = "Access Harmonization User Access Agreement"
                        },
                        new
                        {
                            Code = 10,
                            Name = "Immunization Entry eForm"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.College", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CollegeLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Acronym = "CPSBC",
                            Name = "College of Physicians and Surgeons of BC"
                        },
                        new
                        {
                            Code = 2,
                            Acronym = "CPBC",
                            Name = "College of Pharmacists of BC"
                        },
                        new
                        {
                            Code = 3,
                            Acronym = "BCCNM",
                            Name = "BC College of Nurses and Midwives"
                        },
                        new
                        {
                            Code = 4,
                            Acronym = "CNPBC",
                            Name = "College of Naturopathic Physicians of BC"
                        },
                        new
                        {
                            Code = 5,
                            Acronym = "CDSBC",
                            Name = "College of Dental Surgeons of British Columbia"
                        },
                        new
                        {
                            Code = 6,
                            Acronym = "COBC",
                            Name = "College of Optometrists of British Columbia"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CountryLookup");

                    b.HasData(
                        new
                        {
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Code = "US",
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("ProvinceLookup");

                    b.HasData(
                        new
                        {
                            Code = "AB",
                            CountryCode = "CA",
                            Name = "Alberta"
                        },
                        new
                        {
                            Code = "BC",
                            CountryCode = "CA",
                            Name = "British Columbia"
                        },
                        new
                        {
                            Code = "MB",
                            CountryCode = "CA",
                            Name = "Manitoba"
                        },
                        new
                        {
                            Code = "NB",
                            CountryCode = "CA",
                            Name = "New Brunswick"
                        },
                        new
                        {
                            Code = "NL",
                            CountryCode = "CA",
                            Name = "Newfoundland and Labrador"
                        },
                        new
                        {
                            Code = "NS",
                            CountryCode = "CA",
                            Name = "Nova Scotia"
                        },
                        new
                        {
                            Code = "ON",
                            CountryCode = "CA",
                            Name = "Ontario"
                        },
                        new
                        {
                            Code = "PE",
                            CountryCode = "CA",
                            Name = "Prince Edward Island"
                        },
                        new
                        {
                            Code = "QC",
                            CountryCode = "CA",
                            Name = "Quebec"
                        },
                        new
                        {
                            Code = "SK",
                            CountryCode = "CA",
                            Name = "Saskatchewan"
                        },
                        new
                        {
                            Code = "NT",
                            CountryCode = "CA",
                            Name = "Northwest Territories"
                        },
                        new
                        {
                            Code = "NU",
                            CountryCode = "CA",
                            Name = "Nunavut"
                        },
                        new
                        {
                            Code = "YT",
                            CountryCode = "CA",
                            Name = "Yukon"
                        },
                        new
                        {
                            Code = "AL",
                            CountryCode = "US",
                            Name = "Alabama"
                        },
                        new
                        {
                            Code = "AK",
                            CountryCode = "US",
                            Name = "Alaska"
                        },
                        new
                        {
                            Code = "AS",
                            CountryCode = "US",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Code = "AZ",
                            CountryCode = "US",
                            Name = "Arizona"
                        },
                        new
                        {
                            Code = "AR",
                            CountryCode = "US",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Code = "CA",
                            CountryCode = "US",
                            Name = "California"
                        },
                        new
                        {
                            Code = "CO",
                            CountryCode = "US",
                            Name = "Colorado"
                        },
                        new
                        {
                            Code = "CT",
                            CountryCode = "US",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Code = "DE",
                            CountryCode = "US",
                            Name = "Delaware"
                        },
                        new
                        {
                            Code = "DC",
                            CountryCode = "US",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Code = "FL",
                            CountryCode = "US",
                            Name = "Florida"
                        },
                        new
                        {
                            Code = "GA",
                            CountryCode = "US",
                            Name = "Georgia"
                        },
                        new
                        {
                            Code = "GU",
                            CountryCode = "US",
                            Name = "Guam"
                        },
                        new
                        {
                            Code = "HI",
                            CountryCode = "US",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Code = "ID",
                            CountryCode = "US",
                            Name = "Idaho"
                        },
                        new
                        {
                            Code = "IL",
                            CountryCode = "US",
                            Name = "Illinois"
                        },
                        new
                        {
                            Code = "IN",
                            CountryCode = "US",
                            Name = "Indiana"
                        },
                        new
                        {
                            Code = "IA",
                            CountryCode = "US",
                            Name = "Iowa"
                        },
                        new
                        {
                            Code = "KS",
                            CountryCode = "US",
                            Name = "Kansas"
                        },
                        new
                        {
                            Code = "KY",
                            CountryCode = "US",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Code = "LA",
                            CountryCode = "US",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Code = "ME",
                            CountryCode = "US",
                            Name = "Maine"
                        },
                        new
                        {
                            Code = "MD",
                            CountryCode = "US",
                            Name = "Maryland"
                        },
                        new
                        {
                            Code = "MA",
                            CountryCode = "US",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Code = "MI",
                            CountryCode = "US",
                            Name = "Michigan"
                        },
                        new
                        {
                            Code = "MN",
                            CountryCode = "US",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Code = "MS",
                            CountryCode = "US",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Code = "MO",
                            CountryCode = "US",
                            Name = "Missouri"
                        },
                        new
                        {
                            Code = "MT",
                            CountryCode = "US",
                            Name = "Montana"
                        },
                        new
                        {
                            Code = "NE",
                            CountryCode = "US",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Code = "NV",
                            CountryCode = "US",
                            Name = "Nevada"
                        },
                        new
                        {
                            Code = "NH",
                            CountryCode = "US",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Code = "NJ",
                            CountryCode = "US",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Code = "NM",
                            CountryCode = "US",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Code = "NY",
                            CountryCode = "US",
                            Name = "New York"
                        },
                        new
                        {
                            Code = "NC",
                            CountryCode = "US",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Code = "ND",
                            CountryCode = "US",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Code = "MP",
                            CountryCode = "US",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Code = "OH",
                            CountryCode = "US",
                            Name = "Ohio"
                        },
                        new
                        {
                            Code = "OK",
                            CountryCode = "US",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Code = "OR",
                            CountryCode = "US",
                            Name = "Oregon"
                        },
                        new
                        {
                            Code = "PA",
                            CountryCode = "US",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Code = "PR",
                            CountryCode = "US",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Code = "RI",
                            CountryCode = "US",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Code = "SC",
                            CountryCode = "US",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Code = "SD",
                            CountryCode = "US",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Code = "TN",
                            CountryCode = "US",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Code = "TX",
                            CountryCode = "US",
                            Name = "Texas"
                        },
                        new
                        {
                            Code = "UM",
                            CountryCode = "US",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Code = "UT",
                            CountryCode = "US",
                            Name = "Utah"
                        },
                        new
                        {
                            Code = "VT",
                            CountryCode = "US",
                            Name = "Vermont"
                        },
                        new
                        {
                            Code = "VI",
                            CountryCode = "US",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            Code = "VA",
                            CountryCode = "US",
                            Name = "Virginia"
                        },
                        new
                        {
                            Code = "WA",
                            CountryCode = "US",
                            Name = "Washington"
                        },
                        new
                        {
                            Code = "WV",
                            CountryCode = "US",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Code = "WI",
                            CountryCode = "US",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Code = "WY",
                            CountryCode = "US",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrivacyOfficerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrivacyOfficerId");

                    b.ToTable("MSTeamsClinic");
                });

            modelBuilder.Entity("Pidp.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<LocalDate?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Cpn")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OpId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PreferredFirstName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredLastName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredMiddleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpId")
                        .IsUnique();

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Pidp.Models.PartyLicenceDeclaration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CollegeCode")
                        .HasColumnType("integer");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenceNumber")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollegeCode");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("PartyLicenceDeclaration");
                });

            modelBuilder.Entity("Pidp.Models.HcimAccountTransfer", b =>
                {
                    b.HasBaseType("Pidp.Models.AccessRequest");

                    b.Property<string>("LdapUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("HcimAccountTransfer");
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinicMemberEnrolment", b =>
                {
                    b.HasBaseType("Pidp.Models.AccessRequest");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.HasIndex("ClinicId");

                    b.ToTable("MSTeamsClinicMemberEnrolment");
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinicAddress", b =>
                {
                    b.HasBaseType("Pidp.Models.Address");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.HasIndex("ClinicId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("MSTeamsClinicAddress");
                });

            modelBuilder.Entity("Pidp.Models.AccountLinkingFailure", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("AccountLinkingFailure");
                });

            modelBuilder.Entity("Pidp.Models.AccountLinkingFailure+LinkTicketNotFound", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("LinkTicketNotFound");
                });

            modelBuilder.Entity("Pidp.Models.AccountLinkingSuccess", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("AccountLinkingSuccess");
                });

            modelBuilder.Entity("Pidp.Models.BCProviderPasswordReset", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("BCProviderPasswordReset");
                });

            modelBuilder.Entity("Pidp.Models.CollegeLicenceSearchError", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("CollegeLicenceSearchError");
                });

            modelBuilder.Entity("Pidp.Models.LicenceStatusRoleAssigned", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("LicenceStatusRoleAssigned");
                });

            modelBuilder.Entity("Pidp.Models.LicenceStatusRoleUnassigned", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("LicenceStatusRoleUnassigned");
                });

            modelBuilder.Entity("Pidp.Models.PartyNotInPlr", b =>
                {
                    b.HasBaseType("Pidp.Models.BusinessEvent");

                    b.Property<int>("PartyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("BusinessEvent");

                    b.HasDiscriminator().HasValue("PartyNotInPlr");
                });

            modelBuilder.Entity("Pidp.Models.AccessRequest", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany("AccessRequests")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.Address", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Lookups.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Pidp.Models.Credential", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany("Credentials")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.CredentialLinkErrorLog", b =>
                {
                    b.HasOne("Pidp.Models.CredentialLinkTicket", "CredentialLinkTicket")
                        .WithMany()
                        .HasForeignKey("CredentialLinkTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Credential", "ExistingCredential")
                        .WithMany()
                        .HasForeignKey("ExistingCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialLinkTicket");

                    b.Navigation("ExistingCredential");
                });

            modelBuilder.Entity("Pidp.Models.CredentialLinkTicket", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRelationship", b =>
                {
                    b.HasOne("Pidp.Models.Endorsement", "Endorsement")
                        .WithMany("EndorsementRelationships")
                        .HasForeignKey("EndorsementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endorsement");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRequest", b =>
                {
                    b.HasOne("Pidp.Models.Party", "ReceivingParty")
                        .WithMany()
                        .HasForeignKey("ReceivingPartyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pidp.Models.Party", "RequestingParty")
                        .WithMany()
                        .HasForeignKey("RequestingPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingParty");

                    b.Navigation("RequestingParty");
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinic", b =>
                {
                    b.HasOne("Pidp.Models.Party", "PrivacyOfficer")
                        .WithMany()
                        .HasForeignKey("PrivacyOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyOfficer");
                });

            modelBuilder.Entity("Pidp.Models.PartyLicenceDeclaration", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeCode");

                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithOne("LicenceDeclaration")
                        .HasForeignKey("Pidp.Models.PartyLicenceDeclaration", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.HcimAccountTransfer", b =>
                {
                    b.HasOne("Pidp.Models.AccessRequest", null)
                        .WithOne()
                        .HasForeignKey("Pidp.Models.HcimAccountTransfer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinicMemberEnrolment", b =>
                {
                    b.HasOne("Pidp.Models.MSTeamsClinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.AccessRequest", null)
                        .WithOne()
                        .HasForeignKey("Pidp.Models.MSTeamsClinicMemberEnrolment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinicAddress", b =>
                {
                    b.HasOne("Pidp.Models.MSTeamsClinic", "Clinic")
                        .WithOne("Address")
                        .HasForeignKey("Pidp.Models.MSTeamsClinicAddress", "ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Pidp.Models.AccountLinkingFailure", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.AccountLinkingSuccess", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.BCProviderPasswordReset", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.CollegeLicenceSearchError", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.LicenceStatusRoleAssigned", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.LicenceStatusRoleUnassigned", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.PartyNotInPlr", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.Endorsement", b =>
                {
                    b.Navigation("EndorsementRelationships");
                });

            modelBuilder.Entity("Pidp.Models.MSTeamsClinic", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Pidp.Models.Party", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("Credentials");

                    b.Navigation("LicenceDeclaration");
                });
#pragma warning restore 612, 618
        }
    }
}
