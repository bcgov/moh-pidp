@use '@angular/material' as mat;
@use 'palette';

@import 'bootstrap/bootstrap-imports';

$theme-typography: mat.define-typography-config();

@mixin card-base($color: theme-palette(blue), $margin-bottom: 2rem) {
  color: $color;
  margin-bottom: $margin-bottom;

  // Space out content from card boundaries for
  // visual appeal
  padding-left: 1.2rem;
  padding-right: 1.75rem;
  padding-bottom: 1.5rem;

  .mat-card-header {
    // mobile version
    // flex-direction: column;
    margin-bottom: 0.5rem;

    &.icon-only {
      // Icon provided, but no title
      margin-bottom: 1.25rem;
    }

    &.title-only {
      // Adjust margin slightly to align with content and headers
      // when an icon is not used
      margin-left: 5px;
      margin-bottom: -0.25rem;
    }

    .mat-card-avatar {
      // Control spacing between icon and title
      margin-right: 1.25rem;
      // mobile version
      // margin-bottom: -0.5rem;

      // Font size and position are adjusted to align vertically
      // with a card header icon of a specific size
      .mat-icon {
        font-size: 3rem;
        // Size container to the icon size to reduce
        // possiblity of overlap with other containers
        width: 48px;
        height: 48px;
        // mobile version
        // font-size: 2rem;
      }
    }

    .mat-card-header-text {
      // Remove margin so the mat-card-avatar controls the
      // spacing based on the existence of an icon
      margin-left: 0;
    }

    .mat-card-title {
      margin-top: 0.5rem;
      @include mat.typography-level($theme-typography, 'title');
    }

    // TODO split out to improve useability this is too strict for base
    // but for now is an unnecessary optimization .mat-card-hint
    span {
      font-size: 0.8rem;
      line-height: 1rem;
      // Reduce space between content and boundary to match actions
      // and possible card status
      margin-right: -0.75rem;
      // Use flexbox rules to align span at the end of the container
      margin-left: auto;
    }

    // TODO add in options for cards to have top right menu as alt to hint
  }

  // When only an icon exists in the card header reduce the size of
  // icon to deemphasis and pull the content up to align horizontally
  .mat-card-header.icon-only {
    .mat-icon {
      font-size: 2rem;
    }

    & + .mat-card-content {
      margin-top: -3.6rem;
      margin-left: 3rem;
    }
  }

  .mat-card-content,
  .mat-card-actions {
    // Adjust margin slightly to align with edge of header
    // icon instead of edge of the glyph
    margin-left: 5px;
  }

  // TODO split out to improve useability this is too strict for base
  // but for now is an unnecessary optimization
  // TODO card alert has overriding styles where should they live?
  .mat-card-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    // Force a minimum height for actions equal to the
    // height of a button within the action container
    min-height: 2.75rem;

    // Assumed to contain a button for performing actions
    span:last-child {
      // Align span at the end of the container using
      // Flexbox rules for spacing
      margin-left: auto;
    }
  }
}

@mixin card-hint {
  .mat-card-header {
    position: relative;

    span.hint {
      position: absolute;
      right: 0;
      top: -0.35rem;

      .mat-icon {
        position: absolute;
        left: -1.5rem;
        top: 0;
        font-size: 0.95rem;
      }
    }
  }
}

// Generate reuseable classes based on different
// types of alerts
$types: success, info, warn, danger, muted;

/**
 * @description
 * Container for a <mat-card> that applies an alert-like
 * status around a card that can contain a bit of content.
 */
@mixin card-status {
  display: flex;
  flex-direction: column;

  border-radius: 5px;
  margin-bottom: 2rem;

  & > span {
    font-size: 0.85rem;
    // Apply padding to provide a bit of space
    // between text and boundary
    padding-right: 1rem;
    // Hold open the span regardless of content to the
    // height equivalent to the font-size
    min-height: 1.75rem;
    // Use flexbox rules to align span at the end of
    // the container
    margin-left: auto;
  }

  // Apply a border that could be used to provide a bit
  // of depth to the card statuses
  border-width: 1px;
  border-style: solid;
  border-color: transparent;

  // Offset the addition of a border on the card so they
  // are not shown outside top and right boundaries
  mat-card {
    margin-top: -1px;
    margin-right: -1px;
  }

  // Colour applied share some colour with alert status colours
  // to drive a similar feel between elements
  @each $type in $types {
    &.#{$type} {
      background-color: alert-palette($type, backgroundColorSolid);
      border-color: alert-palette($type, backgroundColorSolid);
      color: alert-palette($type, color);

      // Spacing provide on left side for status colour
      padding-left: 0.3rem;

      // TODO temporary override that should be lifted out,
      //      or provided card status palette
      //      or do this through Sass functions
      @if ($type == 'success' or $type == 'danger' or $type == 'info') {
        color: white;
      }
    }
  }
}

/**
 * @description
 * Apply Bootstrap-like alert theming to a <mat-card> to allow
 * alerts to have card layouts with small adjustments.
 */
@mixin card-alert($textColor, $bgColor, $borderColor) {
  color: $textColor;

  // Flatten the edges of the mat-card so alert styles
  // are smooth and uninterrupted
  transition: none !important;
  box-shadow: none !important;

  background-color: $bgColor;
  border: 1px solid $borderColor;

  @include media-breakpoint-up(md) {
    .mat-card-header {
      // Compress the alert for aesthetics and to
      // reduce its vertical footprint
      margin-bottom: 0;
    }

    // Align content and action containers with the card header
    // title on medium viewports and up when an icon exists
    &.indent .mat-card-content,
    &.indent .mat-card-actions {
      margin-left: 3.75rem;
    }

    // Align actions horizontally instead of stacked
    .mat-card-actions {
      flex-direction: row;
      justify-content: space-between;
      // Vertically align the actions to adjust for diffences in
      // the height of content ie. text and buttons
      align-items: center;
    }
  }
}

@mixin position(
  $position: absolute,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin cover($position: absolute) {
  @include position($position, 0, 0, 0, 0);
}
